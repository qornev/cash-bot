// Code generated by MockGen. DO NOT EDIT.
// Source: internal/converter/converter.go

// Package mock_converter is a generated GoMock package.
package mock_converter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	converter "gitlab.ozon.dev/alex1234562557/telegram-bot/internal/converter"
)

// MockRateUpdater is a mock of RateUpdater interface.
type MockRateUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockRateUpdaterMockRecorder
}

// MockRateUpdaterMockRecorder is the mock recorder for MockRateUpdater.
type MockRateUpdaterMockRecorder struct {
	mock *MockRateUpdater
}

// NewMockRateUpdater creates a new mock instance.
func NewMockRateUpdater(ctrl *gomock.Controller) *MockRateUpdater {
	mock := &MockRateUpdater{ctrl: ctrl}
	mock.recorder = &MockRateUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateUpdater) EXPECT() *MockRateUpdaterMockRecorder {
	return m.recorder
}

// GetUpdate mocks base method.
func (m *MockRateUpdater) GetUpdate(ctx context.Context) (*converter.CurrentRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdate", ctx)
	ret0, _ := ret[0].(*converter.CurrentRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdate indicates an expected call of GetUpdate.
func (mr *MockRateUpdaterMockRecorder) GetUpdate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdate", reflect.TypeOf((*MockRateUpdater)(nil).GetUpdate), ctx)
}

// MockRateManipulator is a mock of RateManipulator interface.
type MockRateManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockRateManipulatorMockRecorder
}

// MockRateManipulatorMockRecorder is the mock recorder for MockRateManipulator.
type MockRateManipulatorMockRecorder struct {
	mock *MockRateManipulator
}

// NewMockRateManipulator creates a new mock instance.
func NewMockRateManipulator(ctrl *gomock.Controller) *MockRateManipulator {
	mock := &MockRateManipulator{ctrl: ctrl}
	mock.recorder = &MockRateManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateManipulator) EXPECT() *MockRateManipulatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRateManipulator) Add(ctx context.Context, date int64, code string, nominal float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, date, code, nominal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockRateManipulatorMockRecorder) Add(ctx, date, code, nominal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRateManipulator)(nil).Add), ctx, date, code, nominal)
}
