// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/alex1234562557/telegram-bot/internal/domain"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(ctx context.Context, text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(ctx, text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), ctx, text, userID)
}

// SendMessageWithKeyboard mocks base method.
func (m *MockMessageSender) SendMessageWithKeyboard(ctx context.Context, text, keyboardMarkup string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageWithKeyboard", ctx, text, keyboardMarkup, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageWithKeyboard indicates an expected call of SendMessageWithKeyboard.
func (mr *MockMessageSenderMockRecorder) SendMessageWithKeyboard(ctx, text, keyboardMarkup, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithKeyboard", reflect.TypeOf((*MockMessageSender)(nil).SendMessageWithKeyboard), ctx, text, keyboardMarkup, userID)
}

// MockExpenseManipulator is a mock of ExpenseManipulator interface.
type MockExpenseManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseManipulatorMockRecorder
}

// MockExpenseManipulatorMockRecorder is the mock recorder for MockExpenseManipulator.
type MockExpenseManipulatorMockRecorder struct {
	mock *MockExpenseManipulator
}

// NewMockExpenseManipulator creates a new mock instance.
func NewMockExpenseManipulator(ctrl *gomock.Controller) *MockExpenseManipulator {
	mock := &MockExpenseManipulator{ctrl: ctrl}
	mock.recorder = &MockExpenseManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseManipulator) EXPECT() *MockExpenseManipulatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockExpenseManipulator) Add(ctx context.Context, date, userID int64, category string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, date, userID, category, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockExpenseManipulatorMockRecorder) Add(ctx, date, userID, category, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExpenseManipulator)(nil).Add), ctx, date, userID, category, amount)
}

// Get mocks base method.
func (m *MockExpenseManipulator) Get(ctx context.Context, userID int64) ([]domain.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].([]domain.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpenseManipulatorMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpenseManipulator)(nil).Get), ctx, userID)
}

// MockUserManipulator is a mock of UserManipulator interface.
type MockUserManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockUserManipulatorMockRecorder
}

// MockUserManipulatorMockRecorder is the mock recorder for MockUserManipulator.
type MockUserManipulatorMockRecorder struct {
	mock *MockUserManipulator
}

// NewMockUserManipulator creates a new mock instance.
func NewMockUserManipulator(ctrl *gomock.Controller) *MockUserManipulator {
	mock := &MockUserManipulator{ctrl: ctrl}
	mock.recorder = &MockUserManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManipulator) EXPECT() *MockUserManipulatorMockRecorder {
	return m.recorder
}

// GetBudget mocks base method.
func (m *MockUserManipulator) GetBudget(ctx context.Context, userID int64) (*float64, string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudget", ctx, userID)
	ret0, _ := ret[0].(*float64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetBudget indicates an expected call of GetBudget.
func (mr *MockUserManipulatorMockRecorder) GetBudget(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudget", reflect.TypeOf((*MockUserManipulator)(nil).GetBudget), ctx, userID)
}

// GetCode mocks base method.
func (m *MockUserManipulator) GetCode(ctx context.Context, userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockUserManipulatorMockRecorder) GetCode(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockUserManipulator)(nil).GetCode), ctx, userID)
}

// SetBudget mocks base method.
func (m *MockUserManipulator) SetBudget(ctx context.Context, userID int64, budget float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBudget", ctx, userID, budget)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBudget indicates an expected call of SetBudget.
func (mr *MockUserManipulatorMockRecorder) SetBudget(ctx, userID, budget interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBudget", reflect.TypeOf((*MockUserManipulator)(nil).SetBudget), ctx, userID, budget)
}

// MockReportCacher is a mock of ReportCacher interface.
type MockReportCacher struct {
	ctrl     *gomock.Controller
	recorder *MockReportCacherMockRecorder
}

// MockReportCacherMockRecorder is the mock recorder for MockReportCacher.
type MockReportCacherMockRecorder struct {
	mock *MockReportCacher
}

// NewMockReportCacher creates a new mock instance.
func NewMockReportCacher(ctrl *gomock.Controller) *MockReportCacher {
	mock := &MockReportCacher{ctrl: ctrl}
	mock.recorder = &MockReportCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReportCacher) EXPECT() *MockReportCacherMockRecorder {
	return m.recorder
}

// GetMonthReport mocks base method.
func (m *MockReportCacher) GetMonthReport(ctx context.Context, key int64) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthReport", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMonthReport indicates an expected call of GetMonthReport.
func (mr *MockReportCacherMockRecorder) GetMonthReport(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthReport", reflect.TypeOf((*MockReportCacher)(nil).GetMonthReport), ctx, key)
}

// GetWeekReport mocks base method.
func (m *MockReportCacher) GetWeekReport(ctx context.Context, key int64) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeekReport", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetWeekReport indicates an expected call of GetWeekReport.
func (mr *MockReportCacherMockRecorder) GetWeekReport(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeekReport", reflect.TypeOf((*MockReportCacher)(nil).GetWeekReport), ctx, key)
}

// GetYearReport mocks base method.
func (m *MockReportCacher) GetYearReport(ctx context.Context, key int64) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYearReport", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetYearReport indicates an expected call of GetYearReport.
func (mr *MockReportCacherMockRecorder) GetYearReport(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYearReport", reflect.TypeOf((*MockReportCacher)(nil).GetYearReport), ctx, key)
}

// RemoveFromAll mocks base method.
func (m *MockReportCacher) RemoveFromAll(ctx context.Context, key []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromAll", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromAll indicates an expected call of RemoveFromAll.
func (mr *MockReportCacherMockRecorder) RemoveFromAll(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromAll", reflect.TypeOf((*MockReportCacher)(nil).RemoveFromAll), ctx, key)
}

// SetMonthReport mocks base method.
func (m *MockReportCacher) SetMonthReport(ctx context.Context, key int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMonthReport", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMonthReport indicates an expected call of SetMonthReport.
func (mr *MockReportCacherMockRecorder) SetMonthReport(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMonthReport", reflect.TypeOf((*MockReportCacher)(nil).SetMonthReport), ctx, key, value)
}

// SetWeekReport mocks base method.
func (m *MockReportCacher) SetWeekReport(ctx context.Context, key int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWeekReport", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWeekReport indicates an expected call of SetWeekReport.
func (mr *MockReportCacherMockRecorder) SetWeekReport(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWeekReport", reflect.TypeOf((*MockReportCacher)(nil).SetWeekReport), ctx, key, value)
}

// SetYearReport mocks base method.
func (m *MockReportCacher) SetYearReport(ctx context.Context, key int64, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetYearReport", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetYearReport indicates an expected call of SetYearReport.
func (mr *MockReportCacherMockRecorder) SetYearReport(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetYearReport", reflect.TypeOf((*MockReportCacher)(nil).SetYearReport), ctx, key, value)
}

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockConverter) Exchange(ctx context.Context, value float64, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", ctx, value, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockConverterMockRecorder) Exchange(ctx, value, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockConverter)(nil).Exchange), ctx, value, from, to)
}

// GetHistoricalCodeRate mocks base method.
func (m *MockConverter) GetHistoricalCodeRate(ctx context.Context, code string, date int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalCodeRate", ctx, code, date)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalCodeRate indicates an expected call of GetHistoricalCodeRate.
func (mr *MockConverterMockRecorder) GetHistoricalCodeRate(ctx, code, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalCodeRate", reflect.TypeOf((*MockConverter)(nil).GetHistoricalCodeRate), ctx, code, date)
}

// UpdateHistoricalRates mocks base method.
func (m *MockConverter) UpdateHistoricalRates(ctx context.Context, date *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHistoricalRates", ctx, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHistoricalRates indicates an expected call of UpdateHistoricalRates.
func (mr *MockConverterMockRecorder) UpdateHistoricalRates(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHistoricalRates", reflect.TypeOf((*MockConverter)(nil).UpdateHistoricalRates), ctx, date)
}
