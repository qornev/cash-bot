// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "gitlab.ozon.dev/alex1234562557/telegram-bot/internal/domain"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// SendMessageWithKeyboard mocks base method.
func (m *MockMessageSender) SendMessageWithKeyboard(text, keyboardMarkup string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageWithKeyboard", text, keyboardMarkup, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageWithKeyboard indicates an expected call of SendMessageWithKeyboard.
func (mr *MockMessageSenderMockRecorder) SendMessageWithKeyboard(text, keyboardMarkup, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithKeyboard", reflect.TypeOf((*MockMessageSender)(nil).SendMessageWithKeyboard), text, keyboardMarkup, userID)
}

// MockExpenseManipulator is a mock of ExpenseManipulator interface.
type MockExpenseManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseManipulatorMockRecorder
}

// MockExpenseManipulatorMockRecorder is the mock recorder for MockExpenseManipulator.
type MockExpenseManipulatorMockRecorder struct {
	mock *MockExpenseManipulator
}

// NewMockExpenseManipulator creates a new mock instance.
func NewMockExpenseManipulator(ctrl *gomock.Controller) *MockExpenseManipulator {
	mock := &MockExpenseManipulator{ctrl: ctrl}
	mock.recorder = &MockExpenseManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseManipulator) EXPECT() *MockExpenseManipulatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockExpenseManipulator) Add(ctx context.Context, date, userID int64, category string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, date, userID, category, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockExpenseManipulatorMockRecorder) Add(ctx, date, userID, category, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockExpenseManipulator)(nil).Add), ctx, date, userID, category, amount)
}

// Get mocks base method.
func (m *MockExpenseManipulator) Get(ctx context.Context, userID int64) ([]*domain.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].([]*domain.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpenseManipulatorMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpenseManipulator)(nil).Get), ctx, userID)
}

// MockUserManipulator is a mock of UserManipulator interface.
type MockUserManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockUserManipulatorMockRecorder
}

// MockUserManipulatorMockRecorder is the mock recorder for MockUserManipulator.
type MockUserManipulatorMockRecorder struct {
	mock *MockUserManipulator
}

// NewMockUserManipulator creates a new mock instance.
func NewMockUserManipulator(ctrl *gomock.Controller) *MockUserManipulator {
	mock := &MockUserManipulator{ctrl: ctrl}
	mock.recorder = &MockUserManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManipulator) EXPECT() *MockUserManipulatorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserManipulator) Get(ctx context.Context, userID int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserManipulatorMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserManipulator)(nil).Get), ctx, userID)
}

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockConverter) Exchange(value float64, from, to string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", value, from, to)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockConverterMockRecorder) Exchange(value, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockConverter)(nil).Exchange), value, from, to)
}
