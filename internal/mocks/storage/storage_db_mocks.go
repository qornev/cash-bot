// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// HostDB mocks base method.
func (m *MockConfigGetter) HostDB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostDB")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostDB indicates an expected call of HostDB.
func (mr *MockConfigGetterMockRecorder) HostDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostDB", reflect.TypeOf((*MockConfigGetter)(nil).HostDB))
}

// PasswordDB mocks base method.
func (m *MockConfigGetter) PasswordDB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordDB")
	ret0, _ := ret[0].(string)
	return ret0
}

// PasswordDB indicates an expected call of PasswordDB.
func (mr *MockConfigGetterMockRecorder) PasswordDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordDB", reflect.TypeOf((*MockConfigGetter)(nil).PasswordDB))
}

// PortDB mocks base method.
func (m *MockConfigGetter) PortDB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortDB")
	ret0, _ := ret[0].(int)
	return ret0
}

// PortDB indicates an expected call of PortDB.
func (mr *MockConfigGetterMockRecorder) PortDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortDB", reflect.TypeOf((*MockConfigGetter)(nil).PortDB))
}

// UsernameDB mocks base method.
func (m *MockConfigGetter) UsernameDB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsernameDB")
	ret0, _ := ret[0].(string)
	return ret0
}

// UsernameDB indicates an expected call of UsernameDB.
func (mr *MockConfigGetterMockRecorder) UsernameDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsernameDB", reflect.TypeOf((*MockConfigGetter)(nil).UsernameDB))
}
