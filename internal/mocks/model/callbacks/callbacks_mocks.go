// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/callbacks/incoming_clb.go

// Package mock_callbacks is a generated GoMock package.
package mock_callbacks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// MockUserManipulator is a mock of UserManipulator interface.
type MockUserManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockUserManipulatorMockRecorder
}

// MockUserManipulatorMockRecorder is the mock recorder for MockUserManipulator.
type MockUserManipulatorMockRecorder struct {
	mock *MockUserManipulator
}

// NewMockUserManipulator creates a new mock instance.
func NewMockUserManipulator(ctrl *gomock.Controller) *MockUserManipulator {
	mock := &MockUserManipulator{ctrl: ctrl}
	mock.recorder = &MockUserManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManipulator) EXPECT() *MockUserManipulatorMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockUserManipulator) Set(ctx context.Context, userID int64, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userID, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockUserManipulatorMockRecorder) Set(ctx, userID, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockUserManipulator)(nil).Set), ctx, userID, code)
}
