// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/rate/rateclient.go

// Package mock_rate is a generated GoMock package.
package mock_rate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfigGetter is a mock of ConfigGetter interface.
type MockConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGetterMockRecorder
}

// MockConfigGetterMockRecorder is the mock recorder for MockConfigGetter.
type MockConfigGetterMockRecorder struct {
	mock *MockConfigGetter
}

// NewMockConfigGetter creates a new mock instance.
func NewMockConfigGetter(ctrl *gomock.Controller) *MockConfigGetter {
	mock := &MockConfigGetter{ctrl: ctrl}
	mock.recorder = &MockConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigGetter) EXPECT() *MockConfigGetterMockRecorder {
	return m.recorder
}

// HostRateAPI mocks base method.
func (m *MockConfigGetter) HostRateAPI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostRateAPI")
	ret0, _ := ret[0].(string)
	return ret0
}

// HostRateAPI indicates an expected call of HostRateAPI.
func (mr *MockConfigGetterMockRecorder) HostRateAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostRateAPI", reflect.TypeOf((*MockConfigGetter)(nil).HostRateAPI))
}

// KeyRateAPI mocks base method.
func (m *MockConfigGetter) KeyRateAPI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyRateAPI")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyRateAPI indicates an expected call of KeyRateAPI.
func (mr *MockConfigGetterMockRecorder) KeyRateAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyRateAPI", reflect.TypeOf((*MockConfigGetter)(nil).KeyRateAPI))
}
